import legacy from './projects.json';

function joinList(list, sep = ' â€¢ ') {
  return Array.isArray(list) ? list.filter(Boolean).map(String).join(sep) : '';
}

function toTimeline(p) {
  const items = [];
  if (p.summary) items.push({ id: 'concept', title: 'Concept', phase: 'Concept', summary: p.summary });
  if (Array.isArray(p.stack) && p.stack.length) items.push({ id: 'stack', title: 'Tech Stack', phase: 'Tech', summary: joinList(p.stack, ', ') });
  if (Array.isArray(p.features) && p.features.length) items.push({ id: 'features', title: 'Features', phase: 'Build', summary: joinList(p.features) });
  if (Array.isArray(p.modes) && p.modes.length) items.push({ id: 'modes', title: 'Modes', phase: 'Design', summary: joinList(p.modes) });
  if (Array.isArray(p.hardware) && p.hardware.length) items.push({ id: 'hardware', title: 'Hardware', phase: 'Hardware', summary: joinList(p.hardware) });
  if (Array.isArray(p.software) && p.software.length) items.push({ id: 'software', title: 'Software', phase: 'Software', summary: joinList(p.software) });

  // Derive highlights from available extra fields if not present
  const derivedHighlights = [].concat(p.highlights || [], p.learned || [], p.impact || [], p.modules || [], p.gameplay || [], p.progress || [])
    .filter(Boolean);
  if (derivedHighlights.length) items.push({ id: 'highlights', title: 'Highlights', phase: 'Results', summary: joinList(derivedHighlights) });

  if (p.links && (p.links.github || p.links.demo)) {
    const links = [];
    if (p.links.github) links.push({ label: 'GitHub', href: p.links.github });
    if (p.links.demo) links.push({ label: 'Demo', href: p.links.demo });
    items.push({ id: 'links', title: 'Links', phase: 'Links', summary: '', links });
  }

  return {
    slug: p.slug,
    title: p.title,
    subtitle: p.category || '',
    year: undefined,
    tags: (Array.isArray(p.stack) ? p.stack.slice(0, 4) : []).concat(p.category ? [p.category] : []),
    image: p.image,
    items
  };
}

export const projects = Array.isArray(legacy) ? legacy.map(toTimeline) : [];
export default projects;

